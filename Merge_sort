#include <iostream>
#include <vector>
#include <chrono>
using namespace std;

// Structure to store a customer order
struct Order {
    int id;
    long long timestamp; // using long long to handle large timestamp values
};

// Merge function
void merge(vector<Order> &orders, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<Order> L(n1), R(n2);

    for (int i = 0; i < n1; i++)
        L[i] = orders[left + i];
    for (int j = 0; j < n2; j++)
        R[j] = orders[mid + 1 + j];

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i].timestamp <= R[j].timestamp) {
            orders[k++] = L[i++];
        } else {
            orders[k++] = R[j++];
        }
    }

    while (i < n1) {
        orders[k++] = L[i++];
    }
    while (j < n2) {
        orders[k++] = R[j++];
    }
}

// Merge Sort function
void mergeSort(vector<Order> &orders, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(orders, left, mid);
        mergeSort(orders, mid + 1, right);

        merge(orders, left, mid, right);
    }
}

int main() {
    int n;
    cout << "Enter number of orders: ";
    cin >> n;

    vector<Order> orders(n);

    cout << "Enter OrderID and Timestamp:\n";
    for (int i = 0; i < n; i++) {
        cin >> orders[i].id >> orders[i].timestamp;
    }

    auto start = chrono::high_resolution_clock::now();
    mergeSort(orders, 0, n - 1);
    auto end = chrono::high_resolution_clock::now();

    cout << "\nSorted Orders by Timestamp:\n";
    for (auto &o : orders) {
        cout << "OrderID: " << o.id << " | Timestamp: " << o.timestamp << endl;
    }

    chrono::duration<double> duration = end - start;
    cout << "\nSorting Time: " << duration.count() << " seconds\n";

    return 0;
}
